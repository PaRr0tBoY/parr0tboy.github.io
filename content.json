{"posts":[{"title":"Mac通用指南其一之访达","text":"此篇介绍 macbook 系统应用访达的进阶使用 在通用中 可以更改桌面上显示的文件,最好取消勾选外置硬盘,因为那是安装软件所用的 dmg 文件,如果有太多 dmg 文件未被推出,将会严重占据桌面空间 dmg 文件可能模仿了古早电脑插入光盘安装软件的形式,这大概也是为什么挂载 dmg 文件后还要将软件拖入本机的应用程序文件夹 在标签中 你可以添加更多标签; 点击标签左侧的色圈并更换标签的颜色; 右键点击标签更改它的命名,例如将红色标签更名为重要; 标签右侧的复选框,当标记为-时代表它们被默认选中,你可以多次点击直到复选框状态为空(不显示)或勾选(显示),以在边栏显示或隐藏此标签; 你可以把自定义的标签拖拽到下方的框选区域,这样下次你右键点击文件时,可以快速把该文件添加到此分类; 在边栏中 可以更改个人收藏中显示的文件夹,建议把文稿,下载,音乐,图片等需要频繁访问的文件夹都勾选上,其余按需勾选; 位置中的外置磁盘同样可以取消勾选掉; 在高级中 将执行搜索时的操作更改为搜索当前文件夹而不是整台 mac,这更符合 Windows 系统下的操作习惯,也更”人类”,毕竟当我们在某个文件夹搜索时,我们想找的文件往往就在那个文件夹中,而不需要在整个磁盘查找; 如果你不太熟悉文件系统管理的操作,最好把所有警告有关的设置都打开; 勾选所有将以下位置的文件夹保持在顶部的所有项目,这样当一个文件夹中既有文件夹又有很多不同类型的文件的时候,就可以将文件夹分层出来置于顶部,杂七杂八的文件就自动”沉底”了,这样有助于文件管理更有序; 🔧 工具栏当你右键点击或用触控板双指轻击访达窗口顶部时,你会看到自定义工具栏的选项: 在自定义工具栏的窗口中,你可以把一些有用的项目拖入工具栏,或者将默认的一组项目拖入工具栏; 除此之外,你还可以更改工具的显示形式,例如图标和文本,仅图标和仅文本,我更喜欢仅图标,这样更简洁且一目了然,也更省空间,如果你拖入太多项目到工具栏,一旦位置不足,多出来的项目就会被隐藏; 你可能不知道,按住⌘键,你可以将文件或文件夹拖动到工具栏,打个比方,你可以安装⌘键把 photoshop 拖到工具栏,并拖动一张图片到工具栏处的 photoshop 图标,这样就可以快速在 photoshop 中开始编辑该图片,你还可以把这套操作应用到别的软件! ⌨️ 快捷键想要进阶访达,快捷键必不可少,以下是一些相当常用的快捷键及其操作: 快捷键 操作 ⌘I 打开/关闭当前选中文件或文件夹的简介 ⌘T 新建标签页 ⌘N 新建访达窗口 ⌘数字 快速更改文件的显示形式 长按/点击 ␣ 长按空格预览选中文件/文件夹,释放则关闭预览,单机空格打开/关闭预览,同时按住shift还可以放慢动画 更多快捷键,可以在顶部菜单栏寻找; 🕹️ 菜单栏在 macOS 中,软件的大部分操作逻辑都被放在顶部菜单栏的左侧,访达也不例外,如果你想快速且全面的上手一款软件,这个位置会是你第一个查看的地方 菜单栏的所有项目的下拉菜单选项都由操作名和快捷键组成,你可以直接点击执行这个操作,也可以记住快捷键,下次直接调用快捷键呼出这个操作; 有的选项没有被分配快捷键,可以在系统设置-键盘-快捷键处点选App 快捷键并添加自定义快捷键 ![截屏2024-08-13 16.41.37](/Users/acid/Library/Application Support/typora-user-images/截屏2024-08-13 16.41.37.png){:height 1235, :width 1250} 在显示的下拉菜单中 可以选择文件的显示形式,可根据需求选择 把除了显示所有标签页的所有隐藏的项目都勾选上,这样就可以始终看到文件的路径,工具栏,状态栏,标签栏等常用项目了,如果你不勾选显示文件的路径,同样可以按住 option 键临时查看当前文件路径 进一步还可以点击查看显示选项以更改图标大小,文字大小,标签位置等显示选项,不过这些设置只作用于当前打开的文件夹,可以点击用作默认,这样将来新建的文件夹也会像当前设置的样子显示文件,但不会影响现有的文件夹； 在前往项目的下拉菜单中 可以快速访问主要文件夹，但是还是从侧栏访问更快捷，也可以由此访问nas服务器 以上就是有关访达的内容，下来将介绍系统设置","link":"/2024/09/27/mac-universal-guide-1/"},{"title":"关于圆的设计","text":"","link":"/2024/06/04/null/"},{"title":"Hexo框架迁移记录","text":"题记：本篇介绍用Hexo框架构建博客的经历 去年弄了基于wordpress的博客，然而碍于备案太麻烦，专门去国外平台租了服务器，买了域名，一番折腾后终于把网站挂在了租来的服务器，不过没几天就被黑客打下来了，我又没有什么运维知识，最终只能不了了之。 后续听说了Github Pages，由Github免费提供的网页寄存服务，可以存放静态网页，包括博客、项目文档、甚至整本书。最重要的是因为网页托管在github那边，因此几乎没有被黑客攻击的风险。 于是今年五月初心血来潮将博客部署在GitHubPages，随便找了个jekyll主题，然后把默认的url解析到去年购买的闲置域名ac1d.cc，配置好cname后自动转发到www前缀，在这之后就放着没管，只是有兴致时写一两篇博文，往往很短，只是随手一记。 这期间上网查阅资料时偶然打开了sukka的博客，顿觉界面十分清爽，三栏布局深得我心。迅速阅览后得知sukka的博客是用hexo框架建立的，于是在阅读官方文档后，我在计算机上安装了Hexo框架，并init了第一个博客文件夹，一开始我想用metarial主题，但是不知为何总是报一堆错，metarial的文档写的也很烂，令人不知所云，最后选择了icarus主题，部署好后终端键入’hexo server’，然后就可以在localhost的4000端口打开博客的预览界面。一番修改后就变成了现在的样子，具体变更可以参阅导航栏上的变更日志。 .utterances{max-width: 100%;}","link":"/2024/06/01/hexo_framework/"},{"title":"Git见解和常用指令","text":"Distributed-is-the-new-centralized 在阅读git的文档的过程中看到这句话，感觉非常精髓。 是说版本控制分为本地版本控制系统、集中化(Centralized)版本控制系统以及分布式(Distributed)版本控制系统，其中： 本地版本控制中，最流行的一种是RCS，其工作原理是在硬盘上保存补丁集（补丁是指文件修订前后的变化）；通过应用所有的补丁，可以重新计算出各个版本的文件内容； 为了让在不同系统上的开发者协同工作，集中化的版本控制系统（Centralized Version Control Systems，简称 CVCS）应运而生，比较具有代表性的比如CVS、Subversion、Perforce等，都有一个单一的集中管理的服务器，保存所有文件的修订版本，协同工作的机器都连接到此地，拉取新文件或是推送更新； 但是如果中心服务器宕机或磁盘损坏，CVCS必然会出现一定的问题，本地版本控制系统也存在类似的问题，只要整个项目的历史记录被保存在单一位置，就有丢失所有历史更新记录的风险； 于是分布式版本控制系统（Distributed Version Control System，简称 DVCS）面世了。 在这类系统中，像 Git、Mercurial 以及 Darcs 等，客户端并不只提取最新版本的文件快照， 而是把代码仓库完整地镜像下来，包括完整的历史记录。 这么一来，任何一处协同工作用的服务器发生故障，事后都可以用任何一个镜像出来的本地仓库恢复。 因为每一次的克隆操作，实际上都是一次对代码仓库的完整备份。 在分布式版本控制系统中，每一个客户端都相当于CVCS中的中心服务器，这样最大程度的确保了历史版本更新文件的安全性，另外，许多这类系统都可以指定和若干不同的远端代码仓库进行交互。籍此，你就可以在同一个项目中，分别和不同工作小组的人相互协作。 你可以根据需要设定不同的协作流程，比如层次模型式的工作流，而这在以前的集中式系统中是无法实现的。 Git的运作逻辑每次提交更新或保存项目状态时，Git都会给当前所有文件创建一个快照，并保存快照的索引，如果有未作修改的文件，出于效率，Git不会重新存储此文件，而只保留一个链接指向之前存储的此文件； 由于Git在客户端上将代码仓库和完整的历史记录都镜像了下来，因此几乎一切操作都可以在本地离线进行，因此速度相当快； Git 中所有的数据在存储前都计算校验和，然后以校验和来引用。 这意味着不可能在 Git 不知情时更改任何文件内容或目录内容。 这个功能建构在 Git 底层,若在传送过程中丢失信息或损坏文件，Git 就能发现。 Git 用以计算校验和的机制叫做 SHA-1 散列（hash，哈希）。 这是一个由 40 个十六进制字符（0-9 和 a-f）组成的字符串，基于 Git 中文件的内容或目录结构计算出来。 SHA-1 哈希看起来是这样： 24b9da6552252987aa493b52f8696cd6d3b00373 实际上，Git 数据库中保存的信息都是以文件内容的哈希值来索引，而不是文件名。 Git一般只添加数据，已经提交到快照的文件，难以被删除，因此说Git几乎不会执行任何可能导致文件不可恢复的操作; Git的文件有三种状态： 已提交（committed）,表示数据已经安全地保存在本地数据库中。 已修改（modified）,表示修改了文件，但还没保存到数据库中。 已暂存（staged）,表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中。 Git维护三颗“树”： 工作目录，持有实际文件，是放在磁盘上直接被修改的工作区。 暂存区(Index/stage,又称索引)，保存着下次将要提交的文件列表信息。 .git directory(repo)，指向最后一次提交(commit)的结果，Git 仓库目录是 Git 用来保存项目的元数据和对象数据库的地方。 这是 Git 中最重要的部分，从其它计算机克隆仓库时，复制的就是这里的数据。 一次修改后，暂存、提交并推送到远程仓库所涉及的指令如下所示： Git常用命令123git add --all //将改动的文件全部放入暂存区git commit -m &quot;fixsinfo&quot; //提交改动到Git仓库目录，并填写改动信息git push origin main //将提交的改动上传到远程仓库中 初始化一个git仓库 1git init 创建一个新文件，并填写一些内容 1echo [Random contents] &gt; [filename] 将工作区中的指定文件添加到暂存区 1git add [filename] 将暂存区的文件提交到版本控制中并附描述 1git commit -m &quot;Change Description&quot; 查看文件状态 1git status 更为紧凑的状态输出 1git status -s/--short A 新添加到暂存区的文件M 修改过的文件输出有两栏，左栏表示暂存区，右栏表示工作区 查看未暂存的已修改文件的差异 1git diff 查看已经暂存的变化 1git diff --cached/--staged 跳过暂存步骤直接提交 1git commit -a -m &quot;Change Description&quot; 从跟踪文件清单和工作仓库中移除某个文件 1git rm [filename] 从暂存区和工作仓库移除某个文件 1git rm -f [filename] 从暂存区移除，在工作仓库中保留某个文件 1git rm --cached [filename] 重命名文件 1git mv [name1] [name2] 忽略文件一般我们总会有些文件无需纳入 Git 的管理，也不希望它们总出现在未跟踪文件列表。 通常都是些自动生成的文件，比如日志文件，或者编译过程中创建的临时文件等。 在这种情况下，我们可以创建一个名为 .gitignore 的文件，列出要忽略的文件的模式。","link":"/2024/05/23/git_command/"},{"title":"自由的代价","text":"最近重拾了以前在Linux上用的自由输入法中州韵，这是我的一些使用体验 🐭 基本介绍 Rime是一个自由的输入法引擎，或框架，它在不同的平台有不同的发行版 - 在mac上叫作[鼠须管]() - 在linux上叫作[中州韵]() - 在windows上叫作[小狼毫]() - 在ios上叫作[仓颉]() Rime是一个自由的输入法框架，通过配置文件载入的「方案」才是狭义上的输入法，这意味着你可以通过框架来构建自己的输入法「方案」，也可以在别人已经构建好的框架上扩展，我就是在雾凇方案上进行扩展的，你可以通过这些方案来： 构建自己的中英文词库 构建常用语 编辑输入法样式（皮肤） 编辑每一个按键的功用 caps lock shift etc… 更改候选词数量 同步多个机器之间的配置 etc… 这篇文章不会介绍如何配置Rime，只介绍些许Rime工作原理，以及少数输入法的有关概念，和我自己的些许感想，如果你想更深入的了解Rime，还请详阅以下网页内容： 雾凇拼音Github仓库 可能是目前最好的Rime全拼方案 Rime简明教程 by BaiYun，阅读这篇文章来初步学习如何配置Rime 鼠须管输入法配置指引 by 哈呜.王，极为详尽的第三方鼠须管配置指引 Rime官方维基 Rime本体Gihub仓库 方案制作详解 通过这个指引来创建自己的输入法方案 Rime-MacOS-like&amp;Wechat-like换皮样式配置 ⚙️ Rime的工作原理 工作流程下面来看一下Rime输入法的工作流程，来更好的理解这个框架： 按键消息→后台「服务」→分配给对应的「会话」→由「方案选单」或「输入引擎」处理…… 通过「方案选单」，Rime可以在不同的会话里选用不同的输入方案(e.g.雾凇全拼、小鹤双拼…)，然后将相应的输入方案载入输入引擎，而输入引擎的工作流程： 加载输入方案、预备功能组件；各就位之后就进入处理按键消息、处理按键消息……的循环 四类组件响应各种按键、产生各类结果的工作，由四类不同的功能组件分担，这些组件被定义在输入方案的scheme文件中，如rime的默认方案luna，代码片段如下： 123456789101112131415161718192021222324252627# luna_pinyin.schema.yaml# ...engine: # 输入引擎标签，下面在引擎上挂载所需组件 processors: # 一、这批组件处理各类按键消息 - ascii_composer # ※ 处理英文模式及中英文切换 - recognizer # ※ 与 matcher 搭配，处理符合特定规则的输入码，如网址、反查等 - key_binder # ※ 在特定条件下将按键绑定到其他按键，如重定义逗号、句号为候选翻页键 - speller # ※ 拼写处理器，接受字符按键，编辑输入码 - punctuator # ※ 断句处理器，将单个字符按键直接映射为文字符号 - selector # ※ 选字处理器，处理数字选字键、上、下候选定位、换页键 - navigator # ※ 处理输入栏内的光标移动键 - express_editor # ※ 编辑器，处理空格、回车上屏、回退键等 segmentors: # 二、这批组件识别不同内容类型，将输入码分段(e.g.分开123 abc , .) - ascii_segmentor # ※ 标识英文段落 - matcher # ※ 标识符合特定规则的段落，如网址、反查等 - abc_segmentor # ※ 标识常规的文字段落 - punct_segmentor # ※ 标识断句 - fallback_segmentor # ※ 回退标识未标记的段落 translators: # 三、这批组件翻译特定类型的编码段为一组候选文字 - echo_translator # ※ 没有其他候选字时，直接显示输入码 - punct_translator # ※ 转换标点符号 - script_translator # ※ 脚本翻译器，用于拼音等基于音节表的输入方案 - reverse_lookup_translator # ※ 反查翻译器，用另一种编码方案查码 filters: # 四、这批组件过滤翻译的结果 - simplifier # ※ 繁简转换 - uniquifier # ※ 过滤重复的候选字，有可能来自繁简转换 processors 这一系列组件会对用户输入依次进行处理，按照预设的规则对按键进行响应，它有以下这些行为： 要么忽略，不对该按键做任何响应，使用系统默认操作 要么处理，即「Processors」中有一个处理器可以处理该按键，并执行对应操作 要么不处理，将用户输入传入下一个「processor」，看它能不能处理 优先级是按配置文件中的列表顺序排列的 「processors」最常见的处理——将按键所产生的字符记入上下文中的「输入码」序列，当「输入码」发生变更时，「seqmentors」就开始新一轮处理 Segmentors 这些组件通过一些规则，将「输入码」按照文字、数字、符号等不同内容分段，并分而治之。如将「mac电脑」拆分为「mac」和「电脑」，并为这些分段打上标签，这样就不会打出「马车电脑」，从而实现了中英混输 「输入码」分段是通过多轮代码段划分操作完成的 每一轮操作中，一众「segmentors」分别给出起始于某一处、符合特定格式的代码段，识别到的最长代码段即本轮的分段结果，例如从“observe观察”分离出的“ob”和“observe”之间会选取最长的“observe”作为正确的分段结果 分好段后就开始给段落贴标签，这些标签是初步划分后判定的类型，可能存在一个编码段贴多个标签的情况，接下来由「translators」把特定类型的编码段翻译为文字 Translators 翻译器系列组件完成由编码到文字的翻译 以下是几个需要注意的要点 翻译的对象是「Segmentors」划分好的一个代码段; 某个「translator」组件往往只翻译具有特定标签的代码段; 翻译的结果可能有多条，每条结果成为一个展现给用户的候选项; 代码段可由几种translator分别翻译、翻译结果按一定规则合并成一列候选; 候选项所对应的编码未必是整个代码段。用拼音敲一个词组时，词组后面继续列出单字候选，即是此例; 内存中翻译器结果是这种样子： 12345input | tag | translations------+--------+-------------------------------------2012 | number | [ &quot;2012&quot; ], [ &quot;二〇一二&quot; ]nian | abc | [ &quot;年&quot;, &quot;念&quot;, &quot;唸&quot;,... ], [ &quot;nian&quot; ]\\ | punct | [ &quot;、&quot;, &quot;\\&quot; ] 可见输入串划分为多个代码段，每个代码段又有多组翻译结果，取各段代码段结果的首选结果组合起来就是预备上屏的文字：“2012年、” 有两种主要的「translator」 script_translator 罗马字分析法 table_translator 码表分析法 拼音、注音、方言拼音，皆是以固定音节表上的拼写排列组合的方式产生编码，故适用罗马字分析法。 仓颉、五笔字型这类则是传统的码表输入法 马字式输入方案以一组固定的基本音节码创造新的组合而构词，而码表式输入方案则以一定码长为限创造新的编码映射而构词 Filters「Filter」即过滤器，它会在当需要在界面上显示一页候选项时，从前面步骤已经收集到的翻译结果中进行筛选。然后从最后一个代码段的翻译结果集开始，一直向前挑选，直到满足设定的最大候选项数（页数限制）。 每从结果集选出一条字词，会经过一组「filters」过滤，多个「filter」串行工作，最终产出的结果哦进入候选序列 filter 可以： 改装正在处理的候选项，修改某些属性值 消除当前候选项，比如检测到重复（由不同translator产生）的候选条目 插入新的候选项，比如根据已有条目插入关联的结果 修改已有的候选序列 通过这四类组件,Rime和输入方案完成从用户输入到上屏字符的转换。 一些和输入法有关的名词 上屏 即把选中的候选词或符号输入到文本框中 双拼 双拼是汉语拼音输入法的一种编码方案。相对于全拼而言，使用双拼输入汉字时只需输入一个代表声母的字母，一个代表韵母的字母，就可以打出任意一个中文字了 以小鹤双拼为例，键盘上的c除了它本身，还代表一个韵母ao，也就是c(ao)，想打出hao，就输入h(声母)c(韵母，代表ao)，下面是一张小鹤双拼的码表 全角/半角 全角字符更宽，像这样ｎｉｈａｏ，而半角字符是这样的nihao，按下⌃ `或F4来修改方案，切换全/半角 回显 即没有候选结果时，直接显示用户输入 反查 简单地说就是使用其他输入模式，查找现有输入模式下的字符输入 去重 去掉候选字词中的重复结果 词典 即输入拼音所对应的字词，一大串就组合成一个词典，还可以用数字作为权重来决定他们在候选字词中的先后 例如- 龙腾虎跃 long teng hu yue 1000 候选词 根据用户输入得出的候选字词 短语 由用户定义的一系列常用短语，可以是口头禅、邮箱、电话等 如有 u 3 感受 如上所示，可以看到这个自由输入法比起同类型的其他——多半是大厂开发的免费输入法相比，配置项有多繁杂，而这些配置甚至没有一个GUI界面可供调参，而是需要你打开其配置文件，通过纯文本的形式修改，一旦填写不符合规范，重载配置的时候就会报错，“列之间缩进分开，列之内空格分开”，而你还必须阅读其冗长的文档，去搞清楚每个配置文件乃至每个配置项是的功用，才能得心应手的调参…","link":"/2024/09/30/null/"},{"title":"Chatgpt的最佳实践","text":"题记：本文介绍如何使用Chatgpt解决实际问题 实践一Arc的Windows版本最近更新了一个侧栏迷你播放器，但是有一个致命问题：就是某些网站播放音频时，播放器无法正确获得歌曲标题，我发现它显示的标题来自相应标签自己的标题，而我是用的网页音乐播放器是am，am不会根据当前播放的歌曲改变标签标题，因此mini播放器也就无法显示正确的歌曲标题，但是打开网页控制台就可以找到歌曲的标题作者等信息所对应的元素属性名字，这意味着可以通过撰写一个js脚本，使得标签标题随着歌曲信息的元素属性更名，每一秒检查一次，并将其挂载在油猴扩展运行，于是我向ChatGPT描述了我的需求，并得到了一段可行的代码。https://chatgpt.com/share/5d0af45f-3da2-480f-b534-ff2efff075dd 12345678910111213141516171819202122232425// ==UserScript==// @name AMTITLE// @namespace http://tampermonkey.net/// @version 2024-05-25// @description try to take over the world!// @author You// @match https://music.apple.com/*// @icon https://www.google.com/s2/favicons?sz=64&amp;domain=apple.com// @grant none// ==/UserScript==function updateTitle() { var audioElement = document.getElementById('apple-music-player'); if (audioElement) { var trackTitle = audioElement.title; if (trackTitle) { document.title = trackTitle; } }}// 设置一个定时器定期检查音乐名称setInterval(updateTitle, 1000); // 每秒检查一次 这以后am的标签名字可以动态的随歌曲名字变化，因此mini播放器也可以做到了。 实践二arc浏览器并不支持中文输入法，这就导致了不管是手动重命名标签或文件夹，还是搜索，都需要在中文部分后打一个空格，再回车才能好使，因此如果有一个脚本能够省去按空格这一步将会很方便，考虑到使用中文输入一整句话的时候并不是一次打完整句话，而是需要不断按空格，却只用按一次回车，因此把回车键绑定为“输入两次空格并延时n毫秒再输入空格”，就可以正常的在arc中使用中文输入法，两次空格是因为用输入法的过程中输入英文单词如果没有识别出来需要按回车来让它以字母的形式打出来而不是一段怪异且不成文的中文，这样子一个空格和一个回车则无法正确在中文部分后面添加到空格，则无法正确搜索。 要实现这个脚本需要用到autohotkey，因为ahk v1已经被废弃，所以采用了v2，向ChatGPT描述了需求后，得到了想要的脚本代码，运作无误，很好，但是有一个问题就是这个脚本是全局的，意味着使用其他软件的时候同样奏效，这就很麻烦，所以添加了一个要求，“只有聚焦到特定窗口的时候才会生效”，得到相应代码后，运作无误，问题解决。 123456789101112131415161718#Requires AutoHotkey v2.0; 设定窗口标题TargetWindowTitle := &quot;Arc&quot;; 监听回车键，只在指定窗口生效#HotIf WinActive(TargetWindowTitle)Enter:: { ; 发送一个空格 Send(&quot; &quot;) ; 等待300毫秒 Sleep(150) ; 发送回车 Send(&quot;{Enter}&quot;)}#HotIf 总结以上两个ChatGPT实践帮助我省去了深入了解js和ahk语法的功夫，因此我有更多的余裕专注于其他事情，我只需要想办法搞清楚我的需求，并清楚的表述出来一切问题就能迎刃而解，综上所述使用chatgpt解决实际问题最重要的还是分析清楚问题的关键，才有可能得到理想答案，事半功倍。","link":"/2024/05/25/chatgptsolvissues/"},{"title":"Arc浏览器Win版常见问题解决方法","text":"题记：本文解决Arc浏览器中的常见错误 浏览器可说是计算机系统中最重要的软件之一，或许没有之一。而Arc浏览器则是众多主流浏览器选择之外最为别出心裁的一个Chromium分支。 少数派用户PlaytyHsu将Arc翻译为弧光，私以为这个翻译很准确，开发Arc浏览器的公司常常将蓝紫色融入他们的设计中，看起来很像弧光，而Arc本身也有这个意思。 本文不展开介绍Arc的优点，前人之述备矣，这篇文章的主要使命是提供一些Windows版本Arc中常见的问题的解决办法。 文章中Arc版本：1.3.2 (30214)，如果您的版本落后，再次运行Arcinstaller或点击左上角Arc图标Check for Updates。 无法注册账号/无法登录/无法跨平台同步标签以克拉施为例： 全局魔法 系统代理 解除Arc浏览器uwp联网限制 Tun mode 切换节点 耐心等待 按钮变灰后需要等一会 因为特殊原因，Arc的登录/同步服务器在大陆一般是ping不通的，因此除魔法外别无他法，即使使用魔法仍旧要等个十秒左右，因人而异，刚开始beta的时候，也有人直连注册登录成功的。 UWP应用联网限制就是Windows系统限制UWP应用访问本地回环（localhost,127.0.0.1）,但是克拉施需要应用能够把网络请求传给本地回环才可以代理,所以解除了UWP限制以后UWP应用的联网就走clash了,此时登录注册正是时候，但是如此一来就会导致hosts文件对Arc发送网络请求的限制失效,因为联网请求被发送给了代理节点的中转服务器,而中转服务器没有被hosts文件解析到本地回环,所以如果开了代理还解除了限制就会导致Arc实际上走clash做了一系列的联网请求,其结果就是能打开但是很慢，因为和服务器通信需要时间，如果你的节点延迟高网速还慢，Arc的启动速度只会更慢，因此登录注册成功后不开代理或者重新启用Arc的联网限制，Arc的联网请求就会全部解析到localhost从而做到秒开。Arc的同步服务器: o298668.ingest.sentry.io:443 Arc的注册登录服务器： 或许是以下之一 http://api.segment.io:443 http://clientstream.launchdarkly.com:443 http://mobile.launchdarkly.com:443 Arc浏览器关闭后无法再次打开或者完全无法打开建议先尝试在系统应用设置中修复或重置Arc，如果此举没有效果，再考虑以下方法。 可能原因分析： 这是大陆用户中最常见的问题，对于我自己，情况是不联网或者全局魔法才可以打开，而且后者比前者等待的时间要久，这或许意味着Arc在打开前有可能要经过一个国内无法ping通的验证服务器，毕竟这是个登录为必选项的浏览器。 我推测Arc在ping通此服务器前是不会打开窗口的，如果访问超时，Arc会不断尝试对该服务器发送网络请求，而如果处于离线状态则不会尝试连接；因此我用fiddler抓包了arc浏览器启动时的网络请求： 用Fiddler抓包 解决办法： 在一次失败的启动后最终筛选出了几个嫌疑较大的URL，并将它们全部解析到本地回环： 127.0.0.1 o298668.ingest.sentry.io 127.0.0.1 mobile.launchdarkly.com 127.0.0.1 clientstream.launchdarkly.com 127.0.0.1 update.googleapis.com 127.0.0.1 api.segment.io 将上述文本粘贴到hosts文件(C:\\WINDOWS\\system32\\drivers\\etc)中后，打开终端敲入： ipconfig /flushdns 刷新DNS解析，然后尝试ping刚才被解析到本地的其中一个域名，例如： ping o298668.ingest.sentry.io 返回”来自 127.0.0.1 的回复: 字节=32 时间&lt;1ms TTL=128“则成功。 这样处理后理论上当Arc尝试向上述URL发送网络请求时就会连接到localhost，而不会因为访问超时而不打开窗口。 再次确认arc后台完全清除后尝试打开，发现已经可以正常打开，速度也快了不少。 在你的电脑上可能不会这么顺利，但这个方法对于我是有用的。 PS：Arc在使用过程中崩溃或人为关闭后，不要立刻再次打开，等待2~3秒后再次打开，否则也有几率导致无法重新打开； 如果还是不行，尝试打开全局魔法，点击左上角arc图标找到Setting中的Arc sync位置打开同步按钮，看到小字sync is working则成功，这个方法比较玄学，不能确定是否真的有效。 另外，解除Arc的UWP联网限制可能是必要的，有关方法请自行查阅资料。 无法创建新标签页，中文搜索跳转到无关标签Arc浏览器没有新标签页的概念，快捷键 ctrl+t 跳出来的搜索框就是新标签页； 方法一： Arc浏览器暂未适配中文输入法，在中文部分之后敲一个空格即可解决问题，不过每次搜索都多按一个空格很麻烦，我的解决方式是写一个ahk脚本，逻辑是将回车键重新绑定为： 两个空格-延迟150ms-回车 这样解决了问题，而且当使用输入法时必须输入英文时，两个空格可以保证英文确实落在搜索框内，且不会因为缺少空格导致跳转到其他界面。 代码(ahk版本为v2)： 方法二（推荐）： 使用Utools网页快开插件，将Arc浏览器设置为默认，其实这是我更推荐的方式，Utools很好用。 用Utools充当Arc浏览器的搜索框架 有关侧栏迷你播放器 侧栏迷你播放器是arc在1.3.2.30214版本更新中新增的设计，主要功能是当有标签播放音频时在侧边栏显示一个迷你播放器，当鼠标悬浮时会显示音频的标题; 然而有一个很抽象的问题是播放器标题直接来自于标签页的标题，而不是调用网页提供的api，我相信这是因为此功能尚处于早期开发阶段。这就导致如果标签页的标题不随所播放音频而改变的话，那么播放器的标题就不会改变，而Apple Music的网页端就是这样的标签页。 于是我写了一个js脚本用于解决该问题，脚本逻辑是从页面中获取歌曲的标题，再将其命名于标签页标题，设置一个间隔1000ms的监视器，并将脚本部署到油猴扩展，这样就完美解决了问题。你也可以为有同样问题的网站写一个类似脚本。 文章涉及的大部分文件，以及一些快捷键总结都打包放到网盘了，使用方法参阅readme.md，链接： https://www.alipan.com/s/Aqy7dSLCAiM 以上只包括我遇到过的问题，如果还有其它有关问题，参阅以下文章： 【Arc for windows beta版踩坑记录-哔哩哔哩】 https://b23.tv/pS8GEM8 【Arc for windows 几个问题解决方法。-哔哩哔哩】 https://b23.tv/8G1n1Na 上述文章总结自个人使用经验，具体情况与效果可能随软硬件差别和时间推移(2024.5.29)有所改变；如果有无法独立解决的Arc浏览器相关问题，可发送至我的邮箱（parrotboy888@outlook.com），有闲会看。","link":"/2024/05/29/arc_browser_problems_solved/"},{"title":"用DNSBench找出解析域名速度最快的DNS","text":"省流：最后还是没能裸连Github •ᴗ•💧 不挂t总是上不去Github，要不就是加载得巨慢无比，一个延迟点的公共DNS或许可以解决问题，遂在网络上搜索相关信息，找到一个叫做DNSBench的软件，内含许多公共DNS服务器的ip，而且支持自己添加DNS，只需一键就可开始测试不同DNS的解析速度，并对比： 12223.5.5.5 alibaba119.29.29.29 tencent ![DNSBENCH用户界面](..\\img\\dns benchmark.jpg) 得出腾讯和阿里的公共DNS解析速度较快，于是把阿里DNS设置成首选DNS，腾讯的设为备用。","link":"/2024/05/24/dnsbench/"},{"title":"Utools Crack","text":"破解版本：utools 4.0.1 下载地址：https://www.cmdpe.com/post/373.html 来自52破解：https://www.52pojie.cn/thread-1830128-1-1.html 所需工具：npm包asar 破解命令： 12345asar e app.asar appasar p app app.asar 破解原理： 现成app.asar包 可选：在解压后的app文件夹下导航到该目录并修改index.js中的搜索框占位符 （\\utools\\resources\\app\\node_modules\\configuration\\index.js） 禁用更新方法：https://www.cnblogs.com/vbig/p/17078902.html","link":"/2024/05/29/utools_crack/"}],"tags":[{"name":"教程","slug":"教程","link":"/tags/%E6%95%99%E7%A8%8B/"},{"name":"科技","slug":"科技","link":"/tags/%E7%A7%91%E6%8A%80/"},{"name":"技巧","slug":"技巧","link":"/tags/%E6%8A%80%E5%B7%A7/"},{"name":"技术","slug":"技术","link":"/tags/%E6%8A%80%E6%9C%AF/"},{"name":"日记","slug":"日记","link":"/tags/%E6%97%A5%E8%AE%B0/"},{"name":"Hexo框架","slug":"hexo框架","link":"/tags/hexo%E6%A1%86%E6%9E%B6/"},{"name":"Git","slug":"git","link":"/tags/git/"},{"name":"wiki","slug":"wiki","link":"/tags/wiki/"},{"name":"效率","slug":"效率","link":"/tags/%E6%95%88%E7%8E%87/"},{"name":"工具","slug":"工具","link":"/tags/%E5%B7%A5%E5%85%B7/"},{"name":"bugfixes","slug":"bugfixes","link":"/tags/bugfixes/"},{"name":"Arc浏览器","slug":"arc浏览器","link":"/tags/arc%E6%B5%8F%E8%A7%88%E5%99%A8/"},{"name":"生产力","slug":"生产力","link":"/tags/%E7%94%9F%E4%BA%A7%E5%8A%9B/"},{"name":"dns","slug":"dns","link":"/tags/dns/"},{"name":"破解","slug":"破解","link":"/tags/%E7%A0%B4%E8%A7%A3/"}],"categories":[{"name":"mac","slug":"mac","link":"/categories/mac/"},{"name":"设计","slug":"设计","link":"/categories/%E8%AE%BE%E8%AE%A1/"},{"name":"笔记","slug":"笔记","link":"/categories/%E7%AC%94%E8%AE%B0/"},{"name":"工具","slug":"工具","link":"/categories/%E5%B7%A5%E5%85%B7/"}],"pages":[{"title":"为什么写博客","text":"","link":"/about/"},{"title":"HOMEPAGE","text":"欢迎你来 「在隆冬，我终于知道，我身上有一个不可战胜的夏天」 查看文章","link":"/"},{"title":"CHANGELOG","text":"Working On: 改变webfont 网页加载动画 自动切换夜间日间模式 换分析系统 抓包分析什么阻碍了加载 番剧列表 seo优化，优化网页在搜索引擎结果中的显示 性能优化 更新robot.txt 更换cdn 修复评论 优化日间模式 公安备案 将网站放到upyun的cdn Finished: 09/28 添加了 downtime 检测服务 09/27 变更日志记录日期倒序 支持了rss订阅 本地仓库整体迁移到mac 05.31 迁移至Hexo，部署Metarial主题 迁移所有文章 06.01 添加深色主题并设置为默认 为卡片添加圆角和鼠标悬浮响应 将卡片位置下移避免被导航栏遮挡，使导航栏始终置顶 修复回到顶部按钮错位 配置一系列第三方服务，评论、内置搜索等 编写readme 更改导航栏文字为中文，添加有关页面 修改Post.md的frontmatter格式，使其更全面 06.02 为文章卡片添加鼠标悬浮动画 为导航栏添加毛玻璃效果，移动端访问单排显示 添加番剧清单、更新日志两个页面 改动页脚，去除默认copyright，添加站点运作时间 改动默认文本翻译风格 post界面固定目录，其余卡片随界面划走 优化移动界面显示 优化首页卡片显示，标题在其他信息之上 添加背景图片，同一张图片分明暗 简化了导航栏分类 优化了滚动条显示 06.03 强化了卡片动画效果 更换了深浅主题切换图标 修改了个人卡片字段，添加分割符并增加格言 将&lt;!--more--&gt;置于所有文章最前，只在首页显示短句 添加了默认主页，现在不会直接打开帖子界面 修改generator.js，使得top属性有效化 为文章配置略缩图 配置top，方便排列文章 去掉disqus 更新permalink，现在文章链接更美观 去除文章前的图标 变更日志现在用html写了，并添加了图标 优化主页显示，图片增加圆角，分割线添加样式 06.04 评论服务 优化了加载速度，压缩html，css文件 去除了algolia和百度分析服务 将博客源文件夹保留在本地，使用hexo deploy部署博客 添加懒加载gif 替换全部封面图，去图床化，直到找到更好更稳定的图床和cdn 暗色模式下，卡片全部毛玻璃化，添加背景图片 06.05 更换jsCDN和iconCDN为bootcdn 换用又拍云图床，并配以picgo管理，压制图片 ac1d.cc->ac1d.space 域名从namesilo更换至腾讯云","link":"/changelog/"},{"title":"Myanimelist","text":"番剧 状态 感想 葬送的芙莉莲 追完 神作，斋藤监督配享太庙，漫画剧情似乎开始有点崩坏… 钢之炼金术师 补完 神，因为是旧版给我一种小时候在电视上看翡翠台benten的感觉，可惜后期剧情是原创，想看fa版但是看了开头感觉除了画质都不如这个版本 Bangdream Mygo!!!!! 补完 因人而异，私以为神作，小时候陪父母看言情剧打下的基础 孤独摇滚 追完 适合所有人类看，圣斋藤，斋门 打工吧！魔王大人 补完 第一季好看，第二季一般 中二病也要谈恋爱 补完 太久以前看的没什么印象了，记得很甜 平凡职业早就世界最强 追完 因为制作实在太有乐子，居然看完了，依托构式，但是看up主吐槽和原作者破防很有意思 重来吧，魔王大人 追完 贫穷的厕纸番，剧情意外有意思，但是没有记忆点 路人灵能百分百 补完 完全按照one老师漫画风格制作的动漫，虽然很好看但是因为是太久以前看的，剧情没什么印象，只记得西兰花（ 擅长捉弄的高木同学 补完 甜蜜捏 野良神 补完 挺好看的，推荐 月色真美 补完 传播很广，很有亚洲人特色的内敛感情，描写很细腻，值得看 俺妹 补完 还不错，结局很难讲，太争议了 春物 补完 前几季看下来有点无聊？而且一季一个画风，制作社更换太频繁了，不过男主还算讨喜，最新一季没看都不知道最后和谁在一起了，我个人比较倾向雪乃 盾勇 追完 憋屈完了，追的时候每次以为要爽的时候立刻让男主吃瘪，跟寸止一样，不过小浣熊还是很可爱的🥰 四谎 补完 最泪目的一集，但是感觉这部作品的嘴唇画的有点怪，二次元就不应该画出红色嘴唇 间谍过家家 追完 只看了第一季和漫画，合家欢类型，适合所有人看，很有意思 夏洛特 补完 如果是半年番24集，就更完美了，12集的限制导致这么好的故事讲的太急，总体还是很好看。另外，友利奈绪我老婆🥰 迷宫饭 在追 非常适合吃饭时候看，看一集正好一碗饭，剧情轻松诙谐，制作优良，扳机社发力了，某些时候动画的表现力果然还是要强于漫画的，虽说这也得益于漫画精巧的设定和情节安排 鬼灭之刃 追完 很热血，有神回，还行，但是因为太出圈，腐女太多，得捏着鼻子看 冰菓 补完 挺好看的，但是开放式结局，而且没有第二季 拾又之国 看完？ 有没有看完暂且存疑，这部似乎是b站刚开始推国创时，年幼的我被骗去看的，现在看来依托构式 国王排名 弃 看了一半忘记看了，后来听说烂尾就没有补完，感觉前半部分还是很不错的 致不灭的你 弃 叫好不叫座，感觉底子很好，但是因为剧情太平淡了吗，很多人包括我都没有看下去 虚构推理 弃 看了大部分，后来不知道为何没看了，仍记得破瓜之痛这个梗 辉夜..恋爱头脑战 追完 动画只要不做第四季就永远是神，原作漫画后期已经糊成依托稀释，动画停在第三季就好 伍六七 补完 可能是国创巅峰，配音很亲切，制作算是精良 奇幻世界舅舅 补完 反套路异世界，相当有意思，漫画进度太慢，舅妈什么时候从异世界出来🥲 魔禁 补完 入宅番之一，从第三季开始看不懂了 非枪人生 追完 有点公路番大叔配女孩的味道，但是不完全一样 因为太怕痛就全点防御了 追完 龙傲天，少见的套路，有意思，适合喜欢刀剑神域的人看 jojo 在补 看到第三季上半部分没看了，很有意思但是没时间看，希望有一天能补完 夏日重现 补完 补完了吗，我也不记得，看到最后几集好像就忘记看完了，挺有创意的，喜欢re0的应该会爱看 异度侵入 补完 不错的原创番，不敢相信这个制作社上一部负责的是妹非妹，可惜结局太老套 相合之物 追完 太治愈了，一果可爱捏 莉克丽丝 追完 好看 施 工 中","link":"/myanimelist/"}]}