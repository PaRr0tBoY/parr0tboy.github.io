{"posts":[{"title":"Placehoder1","text":"Lorem ipsum dolor sit amet, ius cu liber clita volutpat, mei simul appetere pericula an. In dictas fastidii vix, at facilisi accommodare his, tractatos repudiandae deterruisset ius ei. Ne per docendi interpretaris, his ludus nullam eligendi et, mei illum option aeterno ei. Vis populo nusquam antiopam te. Sonet mucius timeam in sit, in nec insolens vulputate persequeris, dicta errem has ex. Omnis nominavi vix ea, accusam disputationi has et. Utinam eloquentiam sit id, scripta fastidii cum id. Cu utroque menandri principes has. Amet propriae argumentum est in, ea duo noluisse indoctum. No facer habemus mediocritatem eam, sed adhuc mentitum instructior ex. Ea mel quod consectetuer, his no quod invidunt. Hinc tempor constituam mea an, usu et dicat elitr. Ea probatus aliquando usu, vel agam mutat ullum id. Pri facilis blandit assentior id, autem summo petentium qui at, insolens scribentur eloquentiam vis ex. Et quot natum scaevola sit, ea his dicam albucius. Veri nemore ne ius. Delenit fastidii has ut. In facilis contentiones consequuntur vel. Consectetuer comprehensam eu sed. Suas erroribus qui at. Aliquam ornatus legendos ex has. Vel veniam nostrum urbanitas eu, esse feugiat qualisque ex usu. An clita integre ius, no fastidii delicata vis. Ei ius erat perfecto, no pro iudico euismod sapientem. Vitae commodo an nam, nec eu nisl ludus sententiae. Fugit iudico referrentur mel ne, eu mei tale simul dicunt.","link":"/2024/06/01/placehoder1/"},{"title":"Placehoder2","text":"Lorem ipsum dolor sit amet, ius cu liber clita volutpat, mei simul appetere pericula an. In dictas fastidii vix, at facilisi accommodare his, tractatos repudiandae deterruisset ius ei. Ne per docendi interpretaris, his ludus nullam eligendi et, mei illum option aeterno ei. Vis populo nusquam antiopam te. Sonet mucius timeam in sit, in nec insolens vulputate persequeris, dicta errem has ex. Omnis nominavi vix ea, accusam disputationi has et. Utinam eloquentiam sit id, scripta fastidii cum id. Cu utroque menandri principes has. Amet propriae argumentum est in, ea duo noluisse indoctum. No facer habemus mediocritatem eam, sed adhuc mentitum instructior ex. Ea mel quod consectetuer, his no quod invidunt. Hinc tempor constituam mea an, usu et dicat elitr. Ea probatus aliquando usu, vel agam mutat ullum id. Pri facilis blandit assentior id, autem summo petentium qui at, insolens scribentur eloquentiam vis ex. Et quot natum scaevola sit, ea his dicam albucius. Veri nemore ne ius. Delenit fastidii has ut. In facilis contentiones consequuntur vel. Consectetuer comprehensam eu sed. Suas erroribus qui at. Aliquam ornatus legendos ex has. Vel veniam nostrum urbanitas eu, esse feugiat qualisque ex usu. An clita integre ius, no fastidii delicata vis. Ei ius erat perfecto, no pro iudico euismod sapientem. Vitae commodo an nam, nec eu nisl ludus sententiae. Fugit iudico referrentur mel ne, eu mei tale simul dicunt.","link":"/2024/06/01/placehoder2/"},{"title":"Hexo框架迁移记录","text":"5.20 - 基于Jekyll框架建立站点并部署到Github pages5.31 - 将Github pages站点整体框架迁移至Hexo并 6.1 - 为站点添加深色模式，并为卡片添加圆角，悬浮响应等； - 为站点部署第三方服务：站内搜索、评论、转发、打赏等；","link":"/2024/06/01/hexo%E6%A1%86%E6%9E%B6%E8%BF%81%E7%A7%BB%E8%AE%B0%E5%BD%95/"},{"title":"Git见解和常用指令","text":"Git二三事 Distributed-is-the-new-centralized 在阅读git的文档的过程中看到这句话，感觉非常精髓。 是说版本控制分为本地版本控制系统、集中化(Centralized)版本控制系统以及分布式(Distributed)版本控制系统，其中： 本地版本控制中，最流行的一种是RCS，其工作原理是在硬盘上保存补丁集（补丁是指文件修订前后的变化）；通过应用所有的补丁，可以重新计算出各个版本的文件内容； 为了让在不同系统上的开发者协同工作，集中化的版本控制系统（Centralized Version Control Systems，简称 CVCS）应运而生，比较具有代表性的比如CVS、Subversion、Perforce等，都有一个单一的集中管理的服务器，保存所有文件的修订版本，协同工作的机器都连接到此地，拉取新文件或是推送更新； 但是如果中心服务器宕机或磁盘损坏，CVCS必然会出现一定的问题，本地版本控制系统也存在类似的问题，只要整个项目的历史记录被保存在单一位置，就有丢失所有历史更新记录的风险； 于是分布式版本控制系统（Distributed Version Control System，简称 DVCS）面世了。 在这类系统中，像 Git、Mercurial 以及 Darcs 等，客户端并不只提取最新版本的文件快照， 而是把代码仓库完整地镜像下来，包括完整的历史记录。 这么一来，任何一处协同工作用的服务器发生故障，事后都可以用任何一个镜像出来的本地仓库恢复。 因为每一次的克隆操作，实际上都是一次对代码仓库的完整备份。 在分布式版本控制系统中，每一个客户端都相当于CVCS中的中心服务器，这样最大程度的确保了历史版本更新文件的安全性，另外，许多这类系统都可以指定和若干不同的远端代码仓库进行交互。籍此，你就可以在同一个项目中，分别和不同工作小组的人相互协作。 你可以根据需要设定不同的协作流程，比如层次模型式的工作流，而这在以前的集中式系统中是无法实现的。 Git的运作逻辑每次提交更新或保存项目状态时，Git都会给当前所有文件创建一个快照，并保存快照的索引，如果有未作修改的文件，出于效率，Git不会重新存储此文件，而只保留一个链接指向之前存储的此文件； 由于Git在客户端上将代码仓库和完整的历史记录都镜像了下来，因此几乎一切操作都可以在本地离线进行，因此速度相当快； Git 中所有的数据在存储前都计算校验和，然后以校验和来引用。 这意味着不可能在 Git 不知情时更改任何文件内容或目录内容。 这个功能建构在 Git 底层,若在传送过程中丢失信息或损坏文件，Git 就能发现。 Git 用以计算校验和的机制叫做 SHA-1 散列（hash，哈希）。 这是一个由 40 个十六进制字符（0-9 和 a-f）组成的字符串，基于 Git 中文件的内容或目录结构计算出来。 SHA-1 哈希看起来是这样： 24b9da6552252987aa493b52f8696cd6d3b00373 实际上，Git 数据库中保存的信息都是以文件内容的哈希值来索引，而不是文件名。 Git一般只添加数据，已经提交到快照的文件，难以被删除，因此说Git几乎不会执行任何可能导致文件不可恢复的操作; Git的文件有三种状态： 已提交（committed）,表示数据已经安全地保存在本地数据库中。 已修改（modified）,表示修改了文件，但还没保存到数据库中。 已暂存（staged）,表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中。 Git维护三颗“树”： 工作目录，持有实际文件，是放在磁盘上直接被修改的工作区。 暂存区(Index/stage,又称索引)，保存着下次将要提交的文件列表信息。 .git directory(repo)，指向最后一次提交(commit)的结果，Git 仓库目录是 Git 用来保存项目的元数据和对象数据库的地方。 这是 Git 中最重要的部分，从其它计算机克隆仓库时，复制的就是这里的数据。 一次修改后，暂存、提交并推送到远程仓库所涉及的指令如下所示： Git常用命令123git add --all //将改动的文件全部放入暂存区git commit -m &quot;fixsinfo&quot; //提交改动到Git仓库目录，并填写改动信息git push origin main //将提交的改动上传到远程仓库中 初始化一个git仓库 1git init 创建一个新文件，并填写一些内容 1echo [Random contents] &gt; [filename] 将工作区中的指定文件添加到暂存区 1git add [filename] 将暂存区的文件提交到版本控制中并附描述 1git commit -m &quot;Change Description&quot; 查看文件状态 1git status 更为紧凑的状态输出 1git status -s/--short A 新添加到暂存区的文件M 修改过的文件输出有两栏，左栏表示暂存区，右栏表示工作区 查看未暂存的已修改文件的差异 1git diff 查看已经暂存的变化 1git diff --cached/--staged 跳过暂存步骤直接提交 1git commit -a -m &quot;Change Description&quot; 从跟踪文件清单和工作仓库中移除某个文件 1git rm [filename] 从暂存区和工作仓库移除某个文件 1git rm -f [filename] 从暂存区移除，在工作仓库中保留某个文件 1git rm --cached [filename] 重命名文件 1git mv [name1] [name2] 忽略文件一般我们总会有些文件无需纳入 Git 的管理，也不希望它们总出现在未跟踪文件列表。 通常都是些自动生成的文件，比如日志文件，或者编译过程中创建的临时文件等。 在这种情况下，我们可以创建一个名为 .gitignore 的文件，列出要忽略的文件的模式。","link":"/2024/05/23/2024-5-23-Git%E8%A7%81%E8%A7%A3%E5%92%8C%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"title":"Github Pages初体验","text":"花了一下午的时间折腾github page，终于部署出来了，却没有什么实感。 本来应该会有成就感什么的，但是现在的心境下感觉还是挫败感更多，本来应该是很简单的事情，但是越弄越复杂，时间如沙似的流走，几乎一整天都砸在这件事情上。 有时候会想我是不是真的很蠢，我总是不能轻易应付各种各样的事情，总是比其他人慢半拍，一旦到这时候就会要自暴自弃，心理崩溃，包裹在心脏上的那层壳子就像破房子的墙花一样的剥落，尽管嘴上说的好听，但其实早就破了防，硬着头皮也要守住最后一丝尊严。 这大概也是为什么我总是半途而废，不管想要学什么都浅尝辄止，从来没有深入过，但凡在某方面被超越，就安慰自己是没有卷，没有去争去抢，不然就不会被轻易超越了，从而更加理所应当更加尽心尽力的躺平摆烂，我实在是不太喜欢这样的自己。","link":"/2024/05/22/2024-5-22-Github-page%E5%88%9D%E4%BD%93%E9%AA%8C/"},{"title":"用DNSBench找出解析域名速度最快的DNS","text":"不挂t总是上不去Github，要不就是加载得巨慢无比，一个延迟点的公共DNS或许可以解决问题，遂在网络上搜索相关信息，找到一个叫做DNSBench的软件，内含许多公共DNS服务器的ip，而且支持自己添加DNS，只需一键就可开始测试不同DNS的解析速度，并对比： 12223.5.5.5 alibaba119.29.29.29 tencent https://img2.imgtp.com/2024/05/24/stBIkkhZ.png 得出腾讯和阿里的公共DNS解析速度较快，于是把阿里DNS设置成首选DNS，腾讯的设为备用。","link":"/2024/05/24/2024-5-24-%E7%94%A8DNSBench%E6%89%BE%E5%87%BA%E8%A7%A3%E6%9E%90%E5%9F%9F%E5%90%8D%E9%80%9F%E5%BA%A6%E6%9C%80%E5%BF%AB%E7%9A%84DNS/"},{"title":"Chatgpt的最佳实践","text":"实践一Arc的Windows版本最近更新了一个侧栏迷你播放器，但是有一个致命问题：就是某些网站播放音频时，播放器无法正确获得歌曲标题，我发现它显示的标题来自相应标签自己的标题，而我是用的网页音乐播放器是am，am不会根据当前播放的歌曲改变标签标题，因此mini播放器也就无法显示正确的歌曲标题，但是打开网页控制台就可以找到歌曲的标题作者等信息所对应的元素属性名字，这意味着可以通过撰写一个js脚本，使得标签标题随着歌曲信息的元素属性更名，每一秒检查一次，并将其挂载在油猴扩展运行，于是我向ChatGPT描述了我的需求，并得到了一段可行的代码。https://chatgpt.com/share/5d0af45f-3da2-480f-b534-ff2efff075dd // ==UserScript== // @name AMTITLE // @namespace http://tampermonkey.net/ // @version 2024-05-25 // @description try to take over the world! // @author You // @match https://music.apple.com/* // @icon https://www.google.com/s2/favicons?sz=64&amp;domain=apple.com // @grant none // ==/UserScript== function updateTitle() { var audioElement = document.getElementById('apple-music-player'); if (audioElement) { var trackTitle = audioElement.title; if (trackTitle) { document.title = trackTitle; } } } // 设置一个定时器定期检查音乐名称 setInterval(updateTitle, 1000); // 每秒检查一次 这以后am的标签名字可以动态的随歌曲名字变化，因此mini播放器也可以做到了。 实践二arc浏览器并不支持中文输入法，这就导致了不管是手动重命名标签或文件夹，还是搜索，都需要在中文部分后打一个空格，再回车才能好使，因此如果有一个脚本能够省去按空格这一步将会很方便，考虑到使用中文输入一整句话的时候并不是一次打完整句话，而是需要不断按空格，却只用按一次回车，因此把回车键绑定为“输入两次空格并延时n毫秒再输入空格”，就可以正常的在arc中使用中文输入法，两次空格是因为用输入法的过程中输入英文单词如果没有识别出来需要按回车来让它以字母的形式打出来而不是一段怪异且不成文的中文，这样子一个空格和一个回车则无法正确在中文部分后面添加到空格，则无法正确搜索。 要实现这个脚本需要用到autohotkey，因为ahk v1已经被废弃，所以采用了v2，向ChatGPT描述了需求后，得到了想要的脚本代码，运作无误，很好，但是有一个问题就是这个脚本是全局的，意味着使用其他软件的时候同样奏效，这就很麻烦，所以添加了一个要求，“只有聚焦到特定窗口的时候才会生效”，得到相应代码后，运作无误，问题解决。 #Requires AutoHotkey v2.0 ; 设定窗口标题 TargetWindowTitle := &quot;Arc&quot; ; 监听回车键，只在指定窗口生效 #HotIf WinActive(TargetWindowTitle) Enter:: { ; 发送一个空格 Send(&quot; &quot;) ; 等待300毫秒 Sleep(150) ; 发送回车 Send(&quot;{Enter}&quot;) } #HotIf 总结以上两个ChatGPT实践帮助我省去了深入了解js和ahk语法的功夫，因此我有更多的余裕专注于其他事情，我只需要想办法搞清楚我的需求，并清楚的表述出来一切问题就能引刃而解，ai通用化时代真的是个很便利的时代呢。","link":"/2024/05/25/2024-5-25-Chatgpt%E7%9A%84%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"},{"title":"Arc浏览器Win版常见问题解决方法","text":"浏览器可说是计算机系统中最重要的软件之一，或许没有之一。而Arc浏览器则是众多主流浏览器选择之外最为别出心裁的一个Chromium分支。 少数派用户PlaytyHsu将Arc翻译为弧光，私以为这个翻译很准确，开发Arc浏览器的公司常常将蓝紫色融入他们的设计中，看起来很像弧光，而Arc本身也有这个意思。 本文不展开介绍Arc的优点，前人之述备矣，这篇文章的主要使命是提供一些Windows版本Arc中常见的问题的解决办法。 文章中Arc版本：1.3.2 (30214)，如果您的版本落后，再次运行Arcinstaller或点击左上角Arc图标Check for Updates。 无法注册账号/无法登录/无法跨平台同步标签以克拉施为例： 全局魔法 系统代理 解除Arc浏览器uwp联网限制 Tun mode 切换节点 耐心等待 按钮变灰后需要等一会 因为特殊原因，Arc的登录/同步服务器在大陆一般是ping不通的，因此除魔法外别无他法，即使使用魔法仍旧要等个十秒左右，因人而异，刚开始beta的时候，也有人直连注册登录成功的。 Arc的同步服务器: o298668.ingest.sentry.io:443 Arc的注册登录服务器： 或许是以下之一 http://api.segment.io:443 http://clientstream.launchdarkly.com:443 http://mobile.launchdarkly.com:443 Arc浏览器关闭后无法再次打开或者完全无法打开建议先尝试在系统应用设置中修复或重置Arc，如果此举没有效果，再考虑以下方法。 可能原因分析： 这是大陆用户中最常见的问题，对于我自己，情况是不联网或者全局魔法才可以打开，而且后者比前者等待的时间要久，这或许意味着Arc在打开前有可能要经过一个国内无法ping通的验证服务器，毕竟这是个登录为必选项的浏览器。 我推测Arc在ping通此服务器前是不会打开窗口的，如果访问超时，Arc会不断尝试对该服务器发送网络请求，而如果处于离线状态则不会尝试连接；因此我用fiddler抓包了arc浏览器启动时的网络请求： 用Fiddler抓包 解决办法： 在一次失败的启动后最终筛选出了几个嫌疑较大的URL，并将它们全部解析到本地回环： 127.0.0.1 o298668.ingest.sentry.io 127.0.0.1 mobile.launchdarkly.com 127.0.0.1 clientstream.launchdarkly.com 127.0.0.1 update.googleapis.com 127.0.0.1 api.segment.io 将上述文本粘贴到hosts文件(C:\\WINDOWS\\system32\\drivers\\etc)中后，打开终端敲入： ipconfig /flushdns 刷新DNS解析，然后尝试ping刚才被解析到本地的其中一个域名，例如： ping o298668.ingest.sentry.io 返回”来自 127.0.0.1 的回复: 字节=32 时间&lt;1ms TTL=128“则成功。 这样处理后理论上当Arc尝试向上述URL发送网络请求时就会连接到localhost，而不会因为访问超时而不打开窗口。 再次确认arc后台完全清除后尝试打开，发现已经可以正常打开，速度也快了不少。 在你的电脑上可能不会这么顺利，但这个方法对于我是有用的。 PS：Arc在使用过程中崩溃或人为关闭后，不要立刻再次打开，等待2~3秒后再次打开，否则也有几率导致无法重新打开； 如果还是不行，尝试打开全局魔法，点击左上角arc图标找到Setting中的Arc sync位置打开同步按钮，看到小字sync is working则成功，这个方法比较玄学，不能确定是否真的有效。 另外，解除Arc的UWP联网限制可能是必要的，有关方法请自行查阅资料。 无法创建新标签页，中文搜索跳转到无关标签Arc浏览器没有新标签页的概念，快捷键 ctrl+t 跳出来的搜索框就是新标签页； 方法一： Arc浏览器暂未适配中文输入法，在中文部分之后敲一个空格即可解决问题，不过每次搜索都多按一个空格很麻烦，我的解决方式是写一个ahk脚本，逻辑是将回车键重新绑定为： 两个空格-延迟150ms-回车 这样解决了问题，而且当使用输入法时必须输入英文时，两个空格可以保证英文确实落在搜索框内，且不会因为缺少空格导致跳转到其他界面。 代码(ahk版本为v2)： 方法二（推荐）： 使用Utools网页快开插件，将Arc浏览器设置为默认，其实这是我更推荐的方式，Utools很好用。 用Utools充当Arc浏览器的搜索框架 有关侧栏迷你播放器 侧栏迷你播放器是arc在1.3.2.30214版本更新中新增的设计，主要功能是当有标签播放音频时在侧边栏显示一个迷你播放器，当鼠标悬浮时会显示音频的标题; 然而有一个很抽象的问题是播放器标题直接来自于标签页的标题，而不是调用网页提供的api，我相信这是因为此功能尚处于早期开发阶段。这就导致如果标签页的标题不随所播放音频而改变的话，那么播放器的标题就不会改变，而Apple Music的网页端就是这样的标签页。 于是我写了一个js脚本用于解决该问题，脚本逻辑是从页面中获取歌曲的标题，再将其命名于标签页标题，设置一个间隔1000ms的监视器，并将脚本部署到油猴扩展，这样就完美解决了问题。你也可以为有同样问题的网站写一个类似脚本。 文章涉及的大部分文件，以及一些快捷键总结都打包放到网盘了，使用方法参阅readme.md，链接： https://www.alipan.com/s/Aqy7dSLCAiM 以上只包括我遇到过的问题，如果还有其它有关问题，参阅以下文章： 【Arc for windows beta版踩坑记录-哔哩哔哩】 https://b23.tv/pS8GEM8 【Arc for windows 几个问题解决方法。-哔哩哔哩】 https://b23.tv/8G1n1Na 上述文章总结自个人使用经验，具体情况与效果可能随软硬件差别和时间推移(2024.5.29)有所改变；如果有无法独立解决的Arc浏览器相关问题，可发送至我的邮箱（parrotboy888@outlook.com），有闲会看。","link":"/2024/05/29/2024-5-29-Arc%E6%B5%8F%E8%A7%88%E5%99%A8Win%E7%89%88%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8C%97/"},{"title":"Utools Crack","text":"破解版本：utools 4.0.1 下载地址：https://www.cmdpe.com/post/373.html 来自52破解：https://www.52pojie.cn/thread-1830128-1-1.html 所需工具：npm包asar 破解命令： 12345asar e app.asar appasar p app app.asar 破解原理： 现成app.asar包 可选：在解压后的app文件夹下导航到该目录并修改index.js中的搜索框占位符 （\\utools\\resources\\app\\node_modules\\configuration\\index.js） 禁用更新方法：https://www.cnblogs.com/vbig/p/17078902.html","link":"/2024/05/29/2024-5-29-Utools%E7%A0%B4%E8%A7%A3%E8%BF%87%E7%A8%8B/"}],"tags":[{"name":"showcase","slug":"showcase","link":"/tags/showcase/"},{"name":"技术","slug":"技术","link":"/tags/%E6%8A%80%E6%9C%AF/"},{"name":"日记","slug":"日记","link":"/tags/%E6%97%A5%E8%AE%B0/"},{"name":"Hexo框架","slug":"hexo框架","link":"/tags/hexo%E6%A1%86%E6%9E%B6/"},{"name":"Git","slug":"git","link":"/tags/git/"},{"name":"wiki","slug":"wiki","link":"/tags/wiki/"},{"name":"感想","slug":"感想","link":"/tags/%E6%84%9F%E6%83%B3/"},{"name":"DNS","slug":"dns","link":"/tags/dns/"},{"name":"测试","slug":"测试","link":"/tags/%E6%B5%8B%E8%AF%95/"},{"name":"AI","slug":"ai","link":"/tags/ai/"},{"name":"实践","slug":"实践","link":"/tags/%E5%AE%9E%E8%B7%B5/"},{"name":"BugFixes","slug":"bugfixes","link":"/tags/bugfixes/"},{"name":"Arc浏览器","slug":"arc浏览器","link":"/tags/arc%E6%B5%8F%E8%A7%88%E5%99%A8/"},{"name":"Utools","slug":"utools","link":"/tags/utools/"},{"name":"效率","slug":"效率","link":"/tags/%E6%95%88%E7%8E%87/"},{"name":"工具","slug":"工具","link":"/tags/%E5%B7%A5%E5%85%B7/"},{"name":"破解","slug":"破解","link":"/tags/%E7%A0%B4%E8%A7%A3/"}],"categories":[],"pages":[]}